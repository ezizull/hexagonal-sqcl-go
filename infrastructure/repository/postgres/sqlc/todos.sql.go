// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: todos.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (activity_group_id, title, is_active, priority)
VALUES ($1, $2, $3, $4)
RETURNING id, activity_group_id, title, is_active, priority, created_at, updated_at, deleted_at
`

type CreateTodoParams struct {
	ActivityGroupID sql.NullInt32
	Title           sql.NullString
	IsActive        sql.NullBool
	Priority        sql.NullString
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.ActivityGroupID,
		arg.Title,
		arg.IsActive,
		arg.Priority,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.ActivityGroupID,
		&i.Title,
		&i.IsActive,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :one
DELETE FROM todos
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteTodo, id)
	err := row.Scan(&id)
	return id, err
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, activity_group_id, title, is_active, priority, created_at, updated_at, deleted_at FROM todos
ORDER BY id DESC
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.ActivityGroupID,
			&i.Title,
			&i.IsActive,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodosByActivity = `-- name: GetTodosByActivity :many
SELECT id, activity_group_id, title, is_active, priority, created_at, updated_at, deleted_at FROM todos
WHERE activity_group_id = $1
ORDER BY id DESC
`

func (q *Queries) GetTodosByActivity(ctx context.Context, activityGroupID sql.NullInt32) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodosByActivity, activityGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.ActivityGroupID,
			&i.Title,
			&i.IsActive,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodosByID = `-- name: GetTodosByID :one
SELECT id, activity_group_id, title, is_active, priority, created_at, updated_at, deleted_at FROM todos
WHERE id = $1
`

func (q *Queries) GetTodosByID(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodosByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.ActivityGroupID,
		&i.Title,
		&i.IsActive,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET 
    title = COALESCE($1, title),
    priority = COALESCE($2, priority),
    is_active = COALESCE($3, is_active),
    updated_at = now()
WHERE id = $4
RETURNING id, activity_group_id, title, is_active, priority, created_at, updated_at, deleted_at
`

type UpdateTodoParams struct {
	Title    sql.NullString
	Priority sql.NullString
	IsActive sql.NullBool
	ID       int64
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo,
		arg.Title,
		arg.Priority,
		arg.IsActive,
		arg.ID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.ActivityGroupID,
		&i.Title,
		&i.IsActive,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
