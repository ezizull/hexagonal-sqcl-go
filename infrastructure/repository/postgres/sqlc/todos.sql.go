// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: todos.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (activity_group_id, title, is_active)
VALUES ($1, $2, $3)
RETURNING id, activity_group_id, title, is_active, priority, created_at, updated_at, deleted_at
`

type CreateTodoParams struct {
	ActivityGroupID sql.NullInt32
	Title           sql.NullString
	IsActive        sql.NullBool
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.ActivityGroupID, arg.Title, arg.IsActive)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.ActivityGroupID,
		&i.Title,
		&i.IsActive,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getSingleTodos = `-- name: GetSingleTodos :many
SELECT id, activity_group_id, title, is_active, priority, created_at, updated_at, deleted_at FROM todos
WHERE id = $1
`

func (q *Queries) GetSingleTodos(ctx context.Context, id int64) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getSingleTodos, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.ActivityGroupID,
			&i.Title,
			&i.IsActive,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodosByActivity = `-- name: GetTodosByActivity :many
SELECT a.id, a.title, email, a.created_at, a.updated_at, a.deleted_at, t.id, activity_group_id, t.title, is_active, priority, t.created_at, t.updated_at, t.deleted_at FROM activities a
JOIN todos t ON a.id = t.activity_group_id
WHERE a.id = $1
ORDER BY id DESC
`

type GetTodosByActivityRow struct {
	ID              int64
	Title           sql.NullString
	Email           sql.NullString
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
	DeletedAt       sql.NullTime
	ID_2            int64
	ActivityGroupID sql.NullInt32
	Title_2         sql.NullString
	IsActive        sql.NullBool
	Priority        sql.NullString
	CreatedAt_2     sql.NullTime
	UpdatedAt_2     sql.NullTime
	DeletedAt_2     sql.NullTime
}

func (q *Queries) GetTodosByActivity(ctx context.Context, id int64) ([]GetTodosByActivityRow, error) {
	rows, err := q.db.QueryContext(ctx, getTodosByActivity, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTodosByActivityRow
	for rows.Next() {
		var i GetTodosByActivityRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.ActivityGroupID,
			&i.Title_2,
			&i.IsActive,
			&i.Priority,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
